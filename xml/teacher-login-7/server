#!/usr/bin/exec-suid -- /usr/bin/env python3 -I

import os, flask, xml.etree.ElementTree as ET
from markupsafe import escape
from lxml import etree

app = flask.Flask(__name__)

@app.route("/login", methods=["POST"])
def login():
    username = flask.request.form.get("user", "")
    try:
        tree = etree.parse("/challenge/users.xml")
        root = tree.getroot()
    except Exception as e:
        return f"Error reading XML: {e}"

    query = f"//user[username/text()='{username}' and is_teacher/text()='yes']"
    try:
        results = root.xpath(query)
    except Exception as e:
        return f"XPath error: {e}"

    if results:
        return f"<p>Logged in as a teacher!<br/>{open('/flag').read()}</p>"
    else:
        return "Login failed. <a href='/'>Try again?</a>"

@app.route("/add", methods=["POST"])
def add():
    username = flask.request.form.get("user", "")

    try:
        tree = ET.parse("/challenge/users.xml")
        root = tree.getroot()
    except Exception:
        root = ET.Element("users")
        tree = ET.ElementTree(root)

    new_user = ET.SubElement(root, "user")
    name_el = ET.SubElement(new_user, "username")
    name_el.text = username
    is_teacher_el = ET.SubElement(new_user, "is_teacher")
    is_teacher_el.text = "no"

    tree.write("/challenge/users.xml")
    return flask.redirect("/")

@app.route("/", methods=["GET"])
def index():
    try:
        db_contents = open("/challenge/users.xml").read()
    except:
        db_contents = "(empty or corrupted XML)"

    return f"""
        <h1>Teacher Login</h1>
        <p>Welcome! Can you log in as <code>teacher</code>?</p>

        <h2>Current Database (users.xml)</h2>
        <pre>{escape(db_contents)}</pre>

        <h2>Add a User</h2>
        <form action="/add" method="post">
            Username: <input type="text" name="user" size="60" autocomplete="off"><br>
            <input type="submit" value="Add">
        </form>

        <h2>Login</h2>
        <form action="/login" method="post">
            Username: <input type="text" name="user" size="60" autocomplete="off"><br>
            <input type="submit" value="Login">
        </form>
    """

if not os.path.exists("/challenge/users.xml"):
    with open("/challenge/users.xml", "w") as f:
        f.write("<users></users>")

app.secret_key = os.urandom(8)
app.config["SERVER_NAME"] = "challenge.localhost:80"
app.run("challenge.localhost", 80)
